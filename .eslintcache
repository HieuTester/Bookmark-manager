[{"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\App.js":"1","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\reducers\\index.js":"2","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\BookmarksList.js":"3","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\NewBookmark.js":"4","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\Bookmark.js":"5","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\actions\\index.js":"6","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\Search.js":"7","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\AddBookmark.js":"8","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\actions\\types.js":"9","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\index.js":"10"},{"size":2593,"mtime":1612343473229,"results":"11","hashOfConfig":"12"},{"size":791,"mtime":1612340968753,"results":"13","hashOfConfig":"12"},{"size":837,"mtime":1612337226698,"results":"14","hashOfConfig":"12"},{"size":1654,"mtime":1611732501257,"results":"15","hashOfConfig":"16"},{"size":393,"mtime":1612256659979,"results":"17","hashOfConfig":"12"},{"size":2195,"mtime":1612339979158,"results":"18","hashOfConfig":"12"},{"size":732,"mtime":1612253412087,"results":"19","hashOfConfig":"12"},{"size":7160,"mtime":1612315482407,"results":"20","hashOfConfig":"12"},{"size":188,"mtime":1612314949583,"results":"21","hashOfConfig":"12"},{"size":541,"mtime":1612252149294,"results":"22","hashOfConfig":"12"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1tfiip5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n4ojih",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\App.js",["47"],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\reducers\\index.js",[],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\BookmarksList.js",["48","49"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Bookmark from '../components/Bookmark';\r\nimport { deleteBookmark } from '../actions';\r\n\r\n\r\nfunction BookmarksList({ bookmarks, deleteBookmark  }) {\r\n  return (\r\n    <div className=\"bookmark_list-wrapper\">\r\n      {bookmarks?.map(bookmark => {\r\n        return (\r\n          <Bookmark bookmark={bookmark} onDelete={deleteBookmark} key={bookmark._id} />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     bookmarks: state\r\n//   };\r\n// };\r\nexport default BookmarksList\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onDelete: _id => {\r\n//       dispatch(deleteBookmark(_id));\r\n//     }\r\n//   };\r\n// };\r\n\r\n// export default connect(\r\n//   null,\r\n//   mapDispatchToProps\r\n// )(BookmarksList);",["50","51"],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\NewBookmark.js",[],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\Bookmark.js",["52"],"import React from 'react';\r\nimport '../App.css'\r\n\r\n\r\nexport default ({ bookmark: { title, url, _id }, onDelete }) => {\r\n  return (\r\n    <div className=\"bookmark-item\">\r\n      <h2>{title}</h2>\r\n      <p>URL: {url}</p>\r\n      <button type=\"button\" >\r\n        Edit\r\n      </button>\r\n      <button type=\"button\" onClick={() => onDelete(_id)}>\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\actions\\index.js",[],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\Search.js",[],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\components\\AddBookmark.js",["53","54","55","56"],"import React, { useEffect, useState } from 'react';\r\nimport { addBookmark } from '../actions';\r\n// import NewBookmark from '../components/NewBookmark';\r\nimport { Form, Modal, Button, Input, Select, message, Divider } from 'antd';\r\nimport { FileAddOutlined, FolderAddOutlined } from '@ant-design/icons';\r\nimport { connect } from 'react-redux';\r\n// import moment from 'moment'\r\n\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n};\r\n\r\n\r\n\r\n\r\nconst AddBookmark = (props) => {\r\n    const [form] = Form.useForm();\r\n    const [isOpenModal, setIsOpenModal] = useState(false)\r\n    const [newTag, setNewTag] = useState('')\r\n    const [listTag, setListTag] = useState([])\r\n    const [bookmark, setBookmark] = useState({})\r\n\r\n    const {\r\n        // bookmark,\r\n        editBookmark,\r\n        listTags, \r\n        addBookmark\r\n    } = props\r\n    useEffect(() => {\r\n        // setBookmark(props.bookmark)\r\n        setListTag(listTags)\r\n    }, [listTags])\r\n\r\n    // useEffect(() => {\r\n    //     if (props.bookmark.id) {\r\n    //         const values = {\r\n    //             id: bookmark.id,\r\n    //             title: bookmark.title,\r\n    //             url: bookmark.content,\r\n    //             groupId: bookmark.group.id,\r\n    //             // date: note.date\r\n    //         }\r\n    //         form.setFieldsValue(values)\r\n    //     }\r\n    // }, [bookmark.id]);\r\n\r\n    const openModal = () => {\r\n        setIsOpenModal(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsOpenModal(false)\r\n    }\r\n    const handleOk = () => {\r\n        closeModal();\r\n        clearFormValues();\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        closeModal();\r\n        clearFormValues();\r\n    };\r\n\r\n    const clearFormValues = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n\r\n    // const getGroupById = groupId => {\r\n    //     const index = listGroup.findIndex(x => x.id === groupId)\r\n    //     return listGroup[index]\r\n    // }\r\n\r\n    // const genNewId = () => Math.random().toString(36).substr(2, 23)\r\n\r\n    function handleAddTag() {\r\n        try {\r\n            if (listTag.filter(item => item === newTag).length === 0) {\r\n                if (newTag.length > 0) {\r\n                    const newListTag = [...listTag]\r\n                    newListTag.push(newTag)\r\n                    setListTag(newListTag)\r\n                }\r\n            } else {\r\n                message.error(\"Tag already exist!\")\r\n            }\r\n        } catch (e) {\r\n            message.error(e.message)\r\n        }\r\n    }\r\n\r\n    const onFinish = values => {\r\n        const newBookmark = {\r\n            title: values.title,\r\n            tag: values.tag,\r\n            url: values.url,\r\n        }\r\n        if (bookmark.id) {\r\n            newBookmark[\"id\"] = bookmark.id\r\n            // newNote[\"date\"] = note.date\r\n            // newNote[\"modifyDate\"] = moment().format('DD/MM/YYYY')\r\n            editBookmark(newBookmark)\r\n        } else {\r\n            // newBookmark[\"id\"] = genNewId()\r\n            // // newNote[\"date\"] = moment().format('DD/MM/YYYY')\r\n            addBookmark(newBookmark);\r\n        }\r\n        console.log(newBookmark)\r\n        closeModal();\r\n        clearFormValues();\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className='add-button'>\r\n            <Button onClick={openModal} type=\"primary\" shape=\"round\" icon={<FolderAddOutlined />} size=\"middle\" />\r\n            <Modal\r\n                title={!bookmark.id ? \"Add A Bookmark\" : \"Edit Bookmark\"}\r\n                visible={isOpenModal}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                footer={[\r\n                    <Button form=\"add-bookmark\" type=\"primary\" key=\"submit\" htmlType=\"submit\">\r\n                        OK\r\n                    </Button>\r\n                ]}\r\n            >\r\n                <Form\r\n                    {...layout}\r\n                    name=\"bookmark\"\r\n                    id=\"add-bookmark\"\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                    form={form}\r\n                >\r\n                    <Form.Item\r\n                        label=\"title\"\r\n                        name=\"title\"\r\n                        // initialValues={note.title}\r\n                        rules={[{ required: true, message: 'Please input note title!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Tag\"\r\n                        name=\"tag\"\r\n                        // value={note.category.id}\r\n                        rules={[{ required: true, message: 'Please select tag!' }]}\r\n                    >\r\n                        <Select\r\n                            style={{ width: \"50%\" }}\r\n                            placeholder=\"Select tag\"\r\n                            dropdownRender={menu => (\r\n                                <div>\r\n                                    {menu}\r\n                                    <Divider style={{ margin: '4px 0' }} />\r\n                                    <div style={{ display: 'flex', flexWrap: 'nowrap', padding: '0 8px', height: '30px' }}>\r\n                                        <Input style={{ flex: 'auto' }} onChange={(e) => setNewTag(e.target.value)} />\r\n                                        <a\r\n                                            style={{ flex: 'none', paddingLeft: '8px', display: 'block', cursor: 'pointer' }}\r\n                                        // onClick={this.addItem}\r\n                                        >\r\n                                            <Button icon={<FileAddOutlined />} onClick={handleAddTag}>\r\n                                            </Button>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        >\r\n                            {listTag?.map((item, index) => (\r\n                                <Option key={index} value={item} >{item}</Option>\r\n                            ))}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {/* <Button style={{margin: \"0 10px\"}}  icon={<FileAddOutlined />} onClick={showCategoryModal}>\r\n                            </Button> */}\r\n                    <Form.Item\r\n                        label=\"Url\"\r\n                        name=\"url\"\r\n                        // initialValues={note.content}\r\n                        rules={[{ required: true, message: 'Please input url!' }]}\r\n                    >\r\n\r\n                        <Input.TextArea rows={4} />\r\n                    </Form.Item>\r\n\r\n\r\n                </Form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onAddBookmark: (bookmark) => {\r\n//             dispatch(addBookmark(bookmark));\r\n//         }\r\n//     };\r\n// };\r\n\r\n// export default connect(null,mapDispatchToProps)(AddBookmark);\r\nexport default AddBookmark;","C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\actions\\types.js",[],"C:\\Users\\Admin\\Desktop\\Bài tập\\bookmark-manager\\src\\index.js",[],{"ruleId":"57","severity":1,"message":"58","line":20,"column":6,"nodeType":"59","endLine":20,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":17},{"ruleId":"61","severity":1,"message":"65","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":24},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":5,"column":1,"nodeType":"72","endLine":18,"endColumn":3},{"ruleId":"61","severity":1,"message":"73","line":2,"column":10,"nodeType":"63","messageId":"64","endLine":2,"endColumn":21},{"ruleId":"61","severity":1,"message":"62","line":6,"column":10,"nodeType":"63","messageId":"64","endLine":6,"endColumn":17},{"ruleId":"61","severity":1,"message":"74","line":25,"column":22,"nodeType":"63","messageId":"64","endLine":25,"endColumn":33},{"ruleId":"75","severity":1,"message":"76","line":168,"column":41,"nodeType":"77","endLine":171,"endColumn":42},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBookmarks'. Either include it or remove the dependency array.","ArrayExpression",["78"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'deleteBookmark' is defined but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'addBookmark' is defined but never used.","'setBookmark' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",{"desc":"81","fix":"82"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getBookmarks]",{"range":"83","text":"84"},[631,633],"[getBookmarks]"]